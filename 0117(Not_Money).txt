문제 
{
    동네 편의점의 주인인 동빈이는 N개의 동전을 가지고 있습니다. 
    
    이때 N개의 동전을 이용하여 만들 수 없는 양의 정수 금액 중 최솟값을 구하는 프로그램을 작성하세요.

    예를 들어, N=5 이고, 각 동전이 각각 3원, 2원, 1원, 1원, 9원짜리(화폐 단위) 동전이라고 가정합시다. 
    
    이때 동빈이가 만들 수 없는 양의 정수 금액 중 최솟값은 8원입니다.

    또 다른 예시로, N=3이고, 각 동전이 각각 3원, 5원, 7원 동전이라고 가정합시다. 
    
    이때 동빈이가 만들 수 없는 양의 정수 금액 중 최솟값은 1원입니다.
}
 
출력 조건
{
   첫째 줄에 주어진 동전들로 만들 수 없는 양의 정수 금액 중 최솟값을 출력합니다.
}
 

입력 예시1
{
    5
    32119
}
 

출력 예시1
{
    8
}


해결 방법
{
    기본적 아이디어 : DP 사용

    점화식을 활용하여 값을 도출해낼 수 있을 것 같다.

    점화식 : answer[now - j] = 
    
    실제 해결 방법

    1. input 값 입력받기

    2. root_list[] 생성 : 각 index에 해당하는 부모 노드의 번호가 들어가도록 설정

    3. 오름차순으로 input 값을 정렬한 뒤 사이클을 만들지 않는 한 앞에서 부터 차례대로 union 연산을 수행한다.

    4. 가장 큰 값을 제외한 나머지 값의 합을 구한다.
}

보완할 점
{
    처음 아이디어를 떠올릴 때 간선이 아닌 노드를 제거한다고 생각하여 시간을 많이 허비한 것 같다.

    문제를 풀 때, 방법만 고수하기보다는 문제를 천천히 다시 읽는 것도 좋은 방법이다.
}