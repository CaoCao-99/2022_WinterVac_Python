문제 {
    동빈이의 큰 수의 법칙은 다양한 수로 이루어진 배열이 있을 때 주어진 수들을 M번 더하여 가장 큰 수를 만드는 법칙이다.
    단, 배열의 특정한 인덱스(번호)에 해당하는 수가 연속해서 K번을 초과하여 더해질 수 없다. 
    예를 들어 순서대로 2, 4, 5, 4, 6으로 이루어진 배열이 있을 때 M이 8이고, K가 3이라고 가정한다. 
    예를 들어 순선대로 2, 4, 5, 6으로 이루어진 배열이 있을 때 M이 8이고, K가 3이라고 가정하자. 
    이 경우 특정한 인덱스의 수가 연속해서 세번까지만 더해질 수 있으므로 큰 수의 법칙에 따른 결과는 6 + 6 + 6 + 5 + 6 + 6 +6 +5인  46이 된다.
    단, 서로 다른 인덱스에 해당하는 수가 같은 경우에도 서로 다른 것으로 간주한다. 
    예를 들어 순서대로 3, 4, 3, 4, 3으로 이루어진 배열이 있을 때 M이 7이고, K가 2라고 가정하자. 
    이 경우 두 번째 원소에 해당하는 4와 네 번째 원소에 해당하는 4를 번갈아 두 번씩 더하는 것이가능하다. 결과적으로 4 + 4 + 4 + 4 + 4 + 4 + 4 + 4인 28이 도출된다.
    배열의 크기 N, 숫자가 더해지는 횟수 M, 그리고 K가 주어질 때 동빈이의 큰 수의 법칙에 따른 결과를 출력하시오. 
}
입력 조건
{
    1. 첫째 줄에 N(2 <= N <= 1,000), M(1 <= M <= 10,000), K(1 <= K <= 10,000)의 자연수가 주어지며, 각 자연수는 공백으로 구분한다.

    2. 둘째 줄에 N개의 자연수가 주어진다. 각 자연수는 공백으로 구분한다. 단, 각각의 자연수는 1 이상 10,000 이하의 수로 주어진다.

    3. 입력으로 주어지는 K는 항상 M보다 작거나 같다.
}
 
출력 조건
{
    첫째 줄에 동빈이의 큰 수의 법칙에 따라 더해진 답을 출력한다.
}
 

입력 예시
{
    3 3
    3 1 2
    4 5 1
    2 2 2
}
 

출력 예시
{
    2
}

해결 방법
{
    기본적 아이디어 : 탐욕적 접근
    가장 큰 값으로 최대한 많이 더하는 것이 답을 구하는 방법이다.
    사실, 잘 생각해보면 가장 큰 값이 2개 이상 존재하면 답은 M * 큰값이 된다.
    그렇지 않은 경우는 그 다음 값을 받아 놓고 큰값을 최대한 많이 넣고 다음 값은 한번씩만 번갈아 가며 넣으면 된다.


    실제 해결 방법
    1. 가장 큰 수 탐색
    2. 큰 수가 1개만 존재하는지 탐색
    2-1 : 2개 이상 존재 시, M*큰 값 출력    
    3. 다음으로 큰 값 탐색
    4. (M / (K+1)) * (K*큰값 + 다음 값) + M % (K+1) * 큰 값  출력
}

보안할 점
{
    우선, 입력 받는 코드에 대해 좀 더 학습해야 한다. (많이 받아보기)
    c언어와 달리 라이브러리를 추가하지 않더라도 sort, max, min 같은 함수들을 사용할 수 있기 때문에 잘 사용해야 할 것 같다.
}