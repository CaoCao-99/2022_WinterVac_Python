문제 {
    N × M 크기의 얼음 틀이 있다. 구멍이 뚫려 있는 부분은 0, 칸막이가 존재하는 부분은 1로 표시된다.

    구멍이 뚫려 있는 부분끼리 상, 하, 좌, 우로 붙어 있는 경우 서로 연결되어 있는 것으로 간주한다.

    이때 얼음 틀의 모양이 주어졌을 때 생성되는 총 아이스크림의 개수를 구하는 프로그램을 작성하라.

    다음의 4 × 5 얼음 틀 예시에서는 아이스크림이 총 3개가 생성된다
}
입력 조건
{
    첫 번째 줄에 얼음 틀의 세로 길이 N과 가로 길이 M이 주어진다. (1 <= N, M <= 1,000)
    
    두 번째 줄부터 N + 1 번째 줄까지 얼음 틀의 형태가 주어진다.
    
    이때 구멍이 뚫려있는 부분은 0, 그렇지 않은 부분은 1이다.
}
 
출력 조건
{
   한 번에 만들 수 있는 아이스크림의 개수를 출력한다.
}
 

입력 예시
{
    4 5
    00110
    00011
    11111
    00000
}
 

출력 예시
{
    3
}

입력 예시 2
{
    15 14
00000111100000
11111101111110
11011101101110
11011101100000
11011111111111
11011111111100
11000000011111
01111111111111
00000000011111
01111111111000
00011111111000
00000001111000
11111111110011
11100011111111
11100011111111
}

출력 예시 2
{
  8   
}

해결 방법
{
    기본적 아이디어 : DFS
    전형적인 DFS 문제이다.
    DFS 문제에서 가장 중요한 것은 재귀 함수를 작성하는 것이다.
    예외처리를 명확히 해주고 return 값을 명확히 넣어주기만 하면 해결할 수 있는 문제다.
    재귀문을 이용하여 DFS형식으로 탐색하다보면 값을 찾을 수 있다.

    실제 해결 방법
    0. 재귀 함수 작성하기(파라미터 값으로 좌표 받아오기)
    1. main 함수 작성하기(for 구문을 이용하여 좌표를 읽고 탐색하지 않은 경우에는 재귀함수를 호출한다.)
    2. 상단의 2개의 함수를 이용하여 값을 도출해낸다.
}

보안할 점
{
    map 활용을 잘 하자(string 형식으로의 int 값이 공백 없이 들어온 경우 map (int, input()) -> 한 자씩 입력 가능)

    for문을 사용하지 않고 재귀문을 만들면 if 문도 사용하지 않아도 됬을 것 + if 문을 재귀문 가장 앞에 놓는 것이 좀 더 효율적으로 보인다.
}