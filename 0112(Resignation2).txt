문제 
{
    상담원으로 일하고 있는 백준이는 퇴사를 하려고 한다.

    오늘부터 N+1일째 되는 날 퇴사를 하기 위해서, 남은 N일 동안 최대한 많은 상담을 하려고 한다.

    백준이는 비서에게 최대한 많은 상담을 잡으라고 부탁을 했고, 비서는 하루에 하나씩 서로 다른 사람의 상담을 잡아놓았다.

    각각의 상담은 상담을 완료하는데 걸리는 기간 Ti와 상담을 했을 때 받을 수 있는 금액 Pi로 이루어져 있다.

    N = 7인 경우에 다음과 같은 상담 일정표를 보자.

        1일	2일	3일	4일	5일	6일	7일
    Ti	3	5	1	1	2	4	2
    Pi	10	20	10	20	15	40	200

    1일에 잡혀있는 상담은 총 3일이 걸리며, 상담했을 때 받을 수 있는 금액은 10이다. 5일에 잡혀있는 상담은 총 2일이 걸리며, 받을 수 있는 금액은 15이다.

    상담을 하는데 필요한 기간은 1일보다 클 수 있기 때문에, 모든 상담을 할 수는 없다. 예를 들어서 1일에 상담을 하게 되면, 2일, 3일에 있는 상담은 할 수 없게 된다. 2일에 있는 상담을 하게 되면, 3, 4, 5, 6일에 잡혀있는 상담은 할 수 없다.

    또한, N+1일째에는 회사에 없기 때문에, 6, 7일에 있는 상담을 할 수 없다.

    퇴사 전에 할 수 있는 상담의 최대 이익은 1일, 4일, 5일에 있는 상담을 하는 것이며, 이때의 이익은 10+20+15=45이다.

    상담을 적절히 했을 때, 백준이가 얻을 수 있는 최대 수익을 구하는 프로그램을 작성하시오.    
}

입력 조건
{
    첫째 줄에 N (1 ≤ N ≤ 1,500,000)이 주어진다.

    둘째 줄부터 N개의 줄에 Ti와 Pi가 공백으로 구분되어서 주어지며, 
    
    1일부터 N일까지 순서대로 주어진다. (1 ≤ Ti ≤ 50, 1 ≤ Pi ≤ 1,000)
}
 
출력 조건
{
    첫째 줄에 백준이가 얻을 수 있는 최대 이익을 출력한다.
}
 

입력 예시
{
    7
    3 10
    5 20
    1 10
    1 20
    2 15
    4 40
    2 200
}
 

출력 예시
{
    45
}

입력 예시2
{
10
1 1
1 2
1 3
1 4
1 5
1 6
1 7
1 8
1 9
1 10
}
 

출력 예시2
{
    55
}

해결 방법
{
    기본적 아이디어 : DP
    
    N+1크기의 리스트를 생성하여 해당 인덱스에 해당하는 값에 그 날까지 일할 경우의 최대 얻을 수 있는 수익을 적어 넣고

    앞의 값을 이용하여 N일까지의 최대 수익을 도출할 수 있을 것 같다.

    앞의 값의 범위가 일정하지 않기 때문에 앞의 범위를 잘 살펴서 진행해야 문제없이 해결할 수 있다.

    예를 들어, for 구문을 돌면서 앞에서부터 들어온 값의 값과 걸리는 시간을 입력받았을 때, 앞의 값을 넣느냐 안넣느냐 2가지의 경우로 나누어서 생각할 경우
    
    income[0] = 0
    if n >= p[1-1][0]:
        income[1] = p[1-1][1]
    n == 2:
        if n >= i + p[i-1][1]:
        income[2] = max()    
    
    *실제 해결 방안*
    값을 계산할 때, 우리는 값을 2가지 경우로 나눌 수 있다. 

    당일날, 상담을 진행하는 경우, 상담을 진행하지 않는 경우

    만약 상담을 진행하는 경우에는 그 날로부터 입력받은 상담기간이 지난 후의 값을 늘려주면 된다.

    그렇지 않으면 그저 반복문을 이용해 다음날로 넘어가게 진행하면 된다.

    처음 상담을 시작할 때, 아직 번 돈이 없기 떄문에 0으로 설정하고 진행하며

    현재까지 가장 많이 번 금액을 M이라는 변수에 저장하고 현재까지 번 돈과 돈이 들어온 날을 비교하여 더 큰값으로 계속하여 교체를 진행시켜

    M에 해당하는 값이 현재까지 가장 많이 번 돈의 값을 저장하게 한다.

    M = max(M, dp[i])

    이후, dp에 해당하는 값은 현재의 최대값인 M값과 현재 dp에 해당하는 값에 이후의 날짜와 금액을 더한 값을 비교하여 값을 넣어준다.

    실제 해결 방법
    arr = > [1,2] / 입력값
    income = [0] * (N+1)
    M = 0
    for i in range(N):
        M = max(M, income[i])
        if i + arr[i][0] <= N:
            dp[i+arr[i][0]] = max(M+ arr[i][1], dp[i+arr[i][0]])
    print(max(dp))
    
}

보완할 점
{
    아직 점화식을 세우는 것에 시간이 너무 많이 걸린다. 비슷한 유형의 문제를 많이 풀어 숙달시켜야 한다.
}