최단 경로

1. 다익스트라 알고리즘(시작 지점에서 부터 각 노드까지의 최단 거리)
{
    기본 원리: 주어진 노드 수만큼의 리스트를 생성하여 리스트에 들어있는 값과 새로 갱신된 값을 비교하며 리스트 내부의 값을 최소화 시켜 최단거리를 구하는 알고리즘

    간단한 구현 방법: 시작 지점에 해당하는 값 초기화 -> 이후, 시작지점을 제외한 노드의 개수만큼 반복문을 돌며 현재까지 존재하는 길 중 가장 가까운 길을 택하여 

    방문한 뒤, 해당 길에서부터 갈 수 있는 길의 거리와 기존에 저장됐던 거리의 값을 비교하여 작은 값으로 갱신한다.

    가장 가까운 길을 택하는 데에 주어진 노드개수 - 1 만큼의 시간이 소요되기 때문에 효율적이지 못하다.
}

2. 개선된 다익스트라 알고리즘
{
    기본 원리: 다익스트라와 동일하지만 시간복잡도를 개선

    방법: 가장 가까운 길을 택하는데에 시간소요를 줄이자(우선순위 큐 사용)

    우선순위 큐를 사용하여 q의 값 안에는 자동으로 거리가 가장 짧은 값에 해당하는 도시의 번호가 정렬되어 있으며

    이를 이용하여 문제를 해결할 수 있다.
}

3. 플로이드 워셜 알고리즘(모든 지점에서 다른 모든 지점까지의 최단 거리)
{
    기본 원리: A에서 바로 B로 가는 것과 A에서 특정 공간을 거쳐서 B를 가는것을 비교하여 더 작은 값으로 board[A][B]를 갱신된

    방법: 점화식(다이나믹 프로그래밍) board[A][B] = min(board[A][B], board[A][k] + board[k][B])

    구현 방법: N x N 크기의 board 생성(INF로 초기화) -> 자기 자신의 경우[1][1] / [2][2]의 경우 0으로 변경 -> 각 간선에 대한 정보 입력
    
    3중 for 문을 이용하여 n만큼의 반복문을 돌리면서 점화식을 수행
}