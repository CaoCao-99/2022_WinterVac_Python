문제 
{
    N가지 종류의 화폐가 있다. 이 화폐들의 개수를 최소한으로 이용해서 그 가치의 합이 M원이 되도록 하려고 한다. 
    
    이때 각 화폐는 몇 개라도 사용할 수 있으며, 사용한 화폐의 구성은 같지만 순서만 다른 것은 같은 경우로 구분한다. 
    
    예를 들어 2원, 3원 단위의 화폐가 있을 때는 15원을 만들기 위해 3원을 5개 사용하는 것이 가장 최소한의 화폐 개수이다.
}

입력 조건
{
    1. 첫째 줄에 N,M이 주어진다(1<= N <= 100, 1<= M <= 10,000)
    
    2. 이후의 N개의 줄에는 각 화폐의 가치가 주어진다. 화폐의 가치는 10,000보다 작거나 같은 자연수이다.
}
 
출력 조건
{
    첫째 줄에 경우의 수 X를 출력한다.(불가능할 때는 -1을 출력한다)
}
 

입력 예시
{
    2 15
    2
    3
}
 

출력 예시
{
    5
}


해결 방법
{
    들어온 값을 최소한의 지폐의 수로 반환해주는 것이 목적이기 때문에

    앞서, 나왔던 DP문제들과 마찬가지로 점화식을 생성하여 문제를 해결할 수 있다.

    우선, M에 해당하는 값을 구하기 위해서는 앞에서부터 값을 알아야 하는데

    예를 들어, 0원의 경우는 아무것도 0번의 반환으로 해결할 수 있다.

    1원의 경우는 1원 한번, 2원의 경우 2원이 존재한다면 2원 한번 없다면 1원 두번으로 해결할 수 있다.

    그렇다면 N원의 경우에는 어떨까?

    N원의 경우에는 현재 본인이 알고 있는 데이터 값을 이용하여 들어온 데이터 값을 뺀 경우의 수(answer[N - 들어온 값] + 1)가 기존의 answer[N]보다 작으면

    바꿔주면 된다.

    점화식으로 풀어서 적게 되면

    answer[N] = min(answer[N - arr[i]]+1 , answer[N])  

    위의 형태로 나오게 되는데 가장 바깥쪽에는 존재하는 화폐의 종류의 개수만큼 돌아가도록 반복문을 짜주고

    내부에는 다시 현재 들어온 화폐의 종류값 부터 M에 해당하는 값까지 for 문을 돌려 answer[N]을 경신시켜주면 된다. 
}
