문제 
{
    개미 전사는 부족한 식량을 충당하고자 메뚜기 마을의 식량창고를 몰래 공격하려고 합니다. 메뚜기 마을에는 여러 개의 식량창고가 있는데 식량창고는 일직선으로 이어져 있습니다.

    각 식량창고에는 정해진 수의 식량을 저장하고 있으며 개미 전사는 선택적으로 약탈하여 식량을 빼앗을 예정입니다. 
    
    이때 메뚜기 정찰병들은 일지선상에 존재하는 식량창고 중에서 서로 인접한 식량창고가 공격받으면 바로 알아챌 수 있습니다.

    따라서 개미 전사가 정찰병에게 들키지 않고 식량창고를 약탈하기 위해서는 최소한 한 칸 이상 떨어진 식량창고를 약탈해야 합니다.

    이때 개미 전사는 두 번째 식량창고와 네 번째 식량창고를 선택했을 때 최댓값인 총 8개의 식량을 빼앗을 수 있습니다. 
    
    개미 전사는 식량창고가 이렇게 일직선상일 때 최대한 많은 식량을 얻기를 윈합니다.

    개미전사를 위해 식량창고 N개에 대한 정보가 주어졌을 때 얻을 수 있는 식량의 최댓값을 구하는 프로그램을 작성하시오.
}

입력 조건
{
    첫째 줄에 식량창고의 개수 N이 주어집니다. (3≤N≤100)
    
    둘째 줄에 공백을 기준으로 각 식량창고에 저장된 식량의 개수 K가 주어집니다. (0≤K≤1,000)
}
 
출력 조건
{
    첫째 줄에 개미 전사가 얻을 수 있는 식량의 최댓값을 출력하세요.
}
 

입력 예시
{
    4
1 3 1 5
}
 

출력 예시
{
    8
}


해결 방법
{
    기본적 아이디어 : DP
    점화식을 잘 세워야 한다.
    우선, 주어진 값의 범위가 3~100인 것과
    주어진 조건이 이웃된 곳은 이용할 수 없다는 것을 이용하여 점화식을 세울 수 있다.
    처음부터 출발하면 3개인 경우에는 좌,우 or 중앙 2가지의 경우가 존재한다.
    4개인 경우에는 (1,3) or (2,4)두가지로 나누어 지는데
    잘 생각해보면 앞에서 부터 출발하여 앞의 값을 이용하게 되면 경우의 수가 늘지 않는다.
    4개인 경우에는 3개의 경우 최선의 경우를 이용해서 풀 수 있다. 4번쨰 값을 넣는 다는 것은 2번째 값과 더한다는 것이고
    넣지 않는다는 것은 1,3번째의 값을 갖는 것이다.
    정리하여 설명하면
    1, 2, 3, ..., i-1, i
    위의 경우 i를 넣는 경우와 넣지 않는 경우를 비교하면 된다.
    넣는 경우: i-2번째에 들어있는 최선의 값과 더하는 것
    넣지 않는 경우: i-1 번째에 들어있는 값
    둘을 비교하면 해결된다.
    점화식 : ai = max(a(i-1), a(i-2) + data[i])


    실제 해결 방법
    a = [0] * 100
    data =list(map(int, input().split()))
    a[0] = data[0]
    a[1] = data[1]
    for i in range(2, N, 1):
        a[i] = max(a[i-2]+data[i], a[i-1])
    print(a[i])
}

보안할 점
{
    점화식을 잘 짜는 것이 중요하다! (특히, DP는 문제마다 특성은 다르지만 리스트를 이용하는 방법이 비슷한 경우가 많으니 명심)
}