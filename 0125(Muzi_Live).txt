문제 
{
    그냥 먹방을 하면 다른 방송과 차별성이 없기 때문에 무지는 아래와 같이 독특한 방식을 생각해냈다.

    회전판에 먹어야 할 N 개의 음식이 있다.
    
    각 음식에는 1부터 N 까지 번호가 붙어있으며, 각 음식을 섭취하는데 일정 시간이 소요된다.
    
    무지는 다음과 같은 방법으로 음식을 섭취한다.
    
    무지는 1번 음식부터 먹기 시작하며, 회전판은 번호가 증가하는 순서대로 음식을 무지 앞으로 가져다 놓는다.
    
    마지막 번호의 음식을 섭취한 후에는 회전판에 의해 다시 1번 음식이 무지 앞으로 온다.
    
    무지는 음식 하나를 1초 동안 섭취한 후 남은 음식은 그대로 두고, 다음 음식을 섭취한다.
    
    다음 음식이란, 아직 남은 음식 중 다음으로 섭취해야 할 가장 가까운 번호의 음식을 말한다.
    
    회전판이 다음 음식을 무지 앞으로 가져오는데 걸리는 시간은 없다고 가정한다.
    
    무지가 먹방을 시작한 지 K 초 후에 네트워크 장애로 인해 방송이 잠시 중단되었다.
    
    무지는 네트워크 정상화 후 다시 방송을 이어갈 때, 몇 번 음식부터 섭취해야 하는지를 알고자 한다.
    
    각 음식을 모두 먹는데 필요한 시간이 담겨있는 배열 food_times, 네트워크 장애가 발생한 시간 K 초가 매개변수로 주어질 때 몇 번 음식부터 다시 섭취하면 되는지 return 하도록 solution 함수를 완성하라.
}


제한 사항
{
    
    food_times 는 각 음식을 모두 먹는데 필요한 시간이 음식의 번호 순서대로 들어있는 배열이다.
    
    k 는 방송이 중단된 시간을 나타낸다.
    
    만약 더 섭취해야 할 음식이 없다면 -1을 반환하면 된다.


    정확성 테스트 제한 사항

    
    food_times 의 길이는 1 이상 2,000 이하이다.
    
    food_times 의 원소는 1 이상 1,000 이하의 자연수이다.
    
    k는 1 이상 2,000,000 이하의 자연수이다.


    효율성 테스트 제한 사항

    
    food_times 의 길이는 1 이상 200,000 이하이다.
    
    food_times 의 원소는 1 이상 100,000,000 이하의 자연수이다.
    
    k는 1 이상 2 x 10^13 이하의 자연수이다.
}
 

입력 예시1
{
food_times	k	result
[3, 1, 2]	5	1
}
 

출력 예시1
{
    1
}


해결 방법
{
    기본적 아이디어 : Greedy_Approach

    #시간초과 아이디어

    문제에서 주어진 무지의 식사 시간은 1초로 고정이다.

    또한 무지는 무조건 번호순서대로 음식을 섭취하기 때문에 k초가 되기 전까지 for 반복문을 이용하여 앞에서부터 음식이 존재하면 섭취한다.

    음식이 존재하는 가에 대한 여부를 food_times 리스트에서 해당하는 인자값을 계속하여 빼주는 것으로 진행한다.

    위의 아이디어는 Brute_Force에 가깝기 때문에 시간복잡도가 매우 높다.

    따라서, 새로운 방법을 탐구해야 한다. -> k초가 지
    
    성공 아이디어

    k초가 들어왔을때 테이블을 몇번 회전할 수 있는지 값을 구하고 그 값을 이용해 답을 구해야만 시간 효율 제한에 통과할 수 있다.
    

    실제 해결 방법

    1. input 값 입력받기(food_times, k)

    2. for 구문 작성(k번) { for 구문 작성(포인터 찾기 용도)if 해당하는 리스트의 값을 가리키는 pointer 설정하여 값이 존재하는 경우}
}

보완할 점
{
    처음 아이디어를 떠올릴 때 간선이 아닌 노드를 제거한다고 생각하여 시간을 많이 허비한 것 같다.

    문제를 풀 때, 방법만 고수하기보다는 문제를 천천히 다시 읽는 것도 좋은 방법이다.
}


#실패코드(효율성)

def solution(food_times, k):
    pointer = -1
    #k번 만큼 반복문 돌기
    for i in range(k):
        #현재 해당하는 포인터 찾기
        for j in range(1,len(food_times)+1):
            if food_times[(pointer+j)%len(food_times)] > 0:
                pointer = (pointer+j) % len(food_times)
                break
            #k번 반복문 수행전에 이미 음식을 다 먹은 경우
            if j == len(food_times):
                return -1
        food_times[pointer] -= 1
        print(food_times)

    answer = 0
    pointer = (pointer+1)%len(food_times)
    for i in range(len(food_times)):
        if food_times[(pointer+i)%len(food_times)] > 0:
            answer = (pointer+i)%len(food_times) + 1
            break
        elif i == len(food_times):
            answer = -1
    return answer